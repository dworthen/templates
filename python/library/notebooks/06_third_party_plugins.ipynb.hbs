{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Third Party Plugins\n",
    "\n",
    "This notebook demonstrates using third party plugins that have been installed in the same python environment as the core library. Third party plugins are automatically discovered, registered and ready to use. Third party plugins are discovered using the python/pep standard of entry points. View the pyproject toml files in sample-plugins to see how entry points are used (poetry entry points as `[tool.poetry.plugins]` while uv exposes entry points as `[project.entry-points]`).\n",
    "\n",
    "- `sample-plugins/llm-client-plugin-logging`: A simple console logger plugin. This package does not depend on the core library but the implemented class satisfies the `LoggerPlugin` protocol.\n",
    "- `sample-plugins/llm-client-plugin-cache`: A cache plugin that relies on a `LogService`. The `LogService` is provided to the plugin from the core library using DI and as such the core library is a dependency of the plugin. Typically third party plugin packages can be published with any package name except plugins that rely on DI from the core library. Those packages must be prefixed with `llm_client_plugin`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Custom Logger INFO: Running Sample App Service.\n",
      "My Custom Logger INFO: Setting cache key.\n",
      "Setting cache key: my_cache_key with value: my_cache_value\n",
      "My Custom Logger INFO: Cache: Setting key 'my_cache_key' with value my_cache_value.\n",
      "My Custom Logger INFO: Getting cache key.\n",
      "My Custom Logger INFO: Cache: Key 'my_cache_key' found in cache with value my_cache_value.\n",
      "My Custom Logger INFO: Retrieved from cache\n",
      "Retrieved from cache: my_cache_key with value: my_cache_value\n"
     ]
    }
   ],
   "source": [
    "from typing import Any\n",
    "\n",
    "from {{packageName}} import Config, create_sample_app\n",
    "\n",
    "settings: dict[str, Any] = {\n",
    "    \"logging\": {\n",
    "        \"plugins\": [\n",
    "            {\n",
    "                \"plugin_id\": \"FileSystemLoggerPlugin\",\n",
    "                \"settings\": {\"filename\": \"logs.txt\", \"structured_logging\": False},\n",
    "            },\n",
    "            {\n",
    "                \"plugin_id\": \"ThirdPartyConsoleLogger\",\n",
    "                \"settings\": {\"name\": \"My Custom Logger\"},\n",
    "            },\n",
    "        ]\n",
    "    },\n",
    "    \"cache\": {\"plugin\": {\"plugin_id\": \"ThirdPartyInMemoryCacheWithLogging\"}},\n",
    "}\n",
    "\n",
    "conf = Config(**settings)\n",
    "\n",
    "app, _ = create_sample_app(conf)\n",
    "app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "llm-client-nTwkRewb-py3.11",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
