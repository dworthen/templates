{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Custom Plugin\n",
    "\n",
    "- register a custom console logger\n",
    "- configure the app to use both file system and console logger\n",
    "- now when app runs it will log to console and notebooks/logs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Custom Logger WARNING: WARNING: Failed to register plugin, 'TestNotAPlugin'. Please check the plugin meets the required protocol of the desired plugin protocol.\n",
      "My Custom Logger INFO: Running Sample App Service.\n",
      "My Custom Logger INFO: Setting cache key.\n",
      "Setting cache key: my_cache_key with value: my_cache_value\n",
      "My Custom Logger INFO: Getting cache key.\n",
      "My Custom Logger INFO: Retrieved from cache\n",
      "Retrieved from cache: my_cache_key with value: my_cache_value\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Failed to register plugin, 'TestNotAPlugin'. Please check the plugin meets the required protocol of the desired plugin protocol."
     ]
    }
   ],
   "source": [
    "import logging\n",
    "from pathlib import Path\n",
    "from typing import Any, Callable\n",
    "\n",
    "from pydantic import BaseModel, Field, model_validator\n",
    "\n",
    "from {{packageName}} import Config, create_sample_app, register_plugin\n",
    "\n",
    "\"\"\"\n",
    "Plugins are protocols so there is no explicit inheritance.\n",
    "This allows third party packages to publish plugins\n",
    "that don't have to depend on the core library and allows\n",
    "them to be auto discovered. \n",
    "View the pyproject.toml files in the sample plugins directory to \n",
    "see how third party packages can make their plugins\n",
    "discoverable using the python pep standard of entry points\n",
    "(poetry calls it plugins in pyproject.toml).\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "class CustomLoggerPluginSettings(BaseModel):\n",
    "    \"\"\"Custom Log Plugin Settings.\n",
    "\n",
    "    Plugins can rely on pydantic models for settings\n",
    "    thus getting pydantic validation and can rely on\n",
    "    other pydantic features.\n",
    "    \"\"\"\n",
    "\n",
    "    name: str = Field(description=\"Logger name.\", default=\"Logger\")\n",
    "\n",
    "    @model_validator(mode=\"after\")\n",
    "    def _validate_model(self):\n",
    "        if self.name.strip() == \"\":\n",
    "            raise ValueError(\"Name cannot be empty.\")\n",
    "        return self\n",
    "\n",
    "\n",
    "class CustomLoggerPlugin:\n",
    "    \"\"\"Custom Log Plugin.\"\"\"\n",
    "\n",
    "    @staticmethod\n",
    "    def get_settings(_: Path, **settings: Any) -> CustomLoggerPluginSettings:\n",
    "        \"\"\"Get settings for the class.\n",
    "\n",
    "        This static method informs the core library and plugin factories\n",
    "        how to resolve settings for the plugin.\n",
    "        \"\"\"\n",
    "        return CustomLoggerPluginSettings(**settings)\n",
    "\n",
    "    def __init__(self, settings: CustomLoggerPluginSettings) -> None:\n",
    "        self.settings = settings\n",
    "        self.log_mapping: dict[int, Callable[[str], None]] = {\n",
    "            logging.DEBUG: self.debug,\n",
    "            logging.INFO: self.info,\n",
    "            logging.WARNING: self.warning,\n",
    "            logging.ERROR: self.error,\n",
    "            logging.CRITICAL: self.critical,\n",
    "            logging.FATAL: self.fatal,\n",
    "        }\n",
    "\n",
    "    def debug(self, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log Debug.\"\"\"\n",
    "        print(f\"{self.settings.name} DEBUG: {msg}\")\n",
    "\n",
    "    def info(self, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log Info.\"\"\"\n",
    "        print(f\"{self.settings.name} INFO: {msg}\")\n",
    "\n",
    "    def warning(self, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log Warning.\"\"\"\n",
    "        print(f\"{self.settings.name} WARNING: {msg}\")\n",
    "\n",
    "    def error(self, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log Error.\"\"\"\n",
    "        print(f\"{self.settings.name} ERROR: {msg}\")\n",
    "\n",
    "    def critical(self, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log Critical.\"\"\"\n",
    "        print(f\"{self.settings.name} CRITICAL: {msg}\")\n",
    "\n",
    "    def fatal(self, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log Fatal.\"\"\"\n",
    "        print(f\"{self.settings.name} FATAL: {msg}\")\n",
    "\n",
    "    def log(self, level: int, msg: str, **kwargs: Any) -> None:\n",
    "        \"\"\"Log.\"\"\"\n",
    "        if level not in self.log_mapping:\n",
    "            raise ValueError(f\"Invalid log level {level}.\")\n",
    "        self.log_mapping[level](msg, **kwargs)\n",
    "\n",
    "\n",
    "# Register the plugin\n",
    "register_plugin(CustomLoggerPlugin)\n",
    "\n",
    "\n",
    "# Register a class that does not meet any of the plugin requirements\n",
    "class TestNotAPlugin:\n",
    "    def __init__(self):\n",
    "        return None\n",
    "\n",
    "    def run(self):\n",
    "        print(\"run\")\n",
    "\n",
    "\n",
    "# This will log and print a warning about failing to registering the plugin.\n",
    "register_plugin(TestNotAPlugin)\n",
    "\n",
    "\"\"\"\n",
    "Configure the library to use the plugin.\n",
    "The plugin is available using the plugin class name.\n",
    "Unlike other plugins, multiple logger plugins can be registered \n",
    "and used to send logs to multiple destinations.\n",
    "This should continue to place logs in the logs directory\n",
    "and console them out.\n",
    "\"\"\"\n",
    "\n",
    "settings: dict[str, Any] = {\n",
    "    \"logging\": {\n",
    "        \"plugins\": [\n",
    "            {\n",
    "                \"plugin_id\": \"FileSystemLoggerPlugin\",\n",
    "            },\n",
    "            {\n",
    "                \"plugin_id\": \"CustomLoggerPlugin\",\n",
    "                \"settings\": {\"name\": \"My Custom Logger\"},\n",
    "            },\n",
    "        ]\n",
    "    }\n",
    "}\n",
    "\n",
    "conf = Config(**settings)\n",
    "\n",
    "app, _ = create_sample_app(conf)\n",
    "app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "llm-client-nTwkRewb-py3.11",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
