"""Load the service container.

Instantiates the service container and registers plugins for each plugin factory.
Classes within the core library that meet a plugin protocol are auto registered.
Third-party plugins exposed using entry_points are also auto registered.

View sample-plugins directory for example of third party plugins
that are exposed using entry_points (called plugins with poetry).

"""

import importlib
import inspect
import pkgutil
import sys
from typing import Any, TypeVar

from {{packageName}}.config.config import Config
from {{packageName}}.factories.factory import Factory
from {{packageName}}.plugins.cache.cache_plugin import CachePlugin
from {{packageName}}.plugins.logger.logger_plugin import LoggerPlugin
from {{packageName}}.plugins.plugin import Plugin
from {{packageName}}.plugins.register_plugin import _plugins
from {{packageName}}.services.service_container import ServiceContainer

T = TypeVar("T", bound=Plugin[Any])

_used_plugins: list[str] = []


def _get_plugins(t: type[T]) -> list[type[T]]:
    """Get all the builtin concrete plugins to auto register.
    
    Registers all classes that meet a plugin protocol within the core library.
    Also registers any plugins that were programatically registered (stored in _plugins).
    """
    classes: list[type[T]] = []

    package = importlib.import_module("{{packageName}}")
    for _, modname, _ in pkgutil.walk_packages(
        package.__path__, f"{package.__name__}."
    ):
        module = importlib.import_module(modname)
        for _, obj in inspect.getmembers(module):
            if (
                inspect.isclass(obj)
                and obj.__module__ == module.__name__
                and issubclass(obj, t)
                and obj != t
            ):
                classes.append(obj)

    # _plugins are plugins that were programatically registered
    # They may not have been registered correctly or classes
    # that do not actually meet a plugin protocol may have been registered
    # so keep track of the plugins that successfully registered
    # and warn about the ones that did not further below.
    for plugin in _plugins:
        if issubclass(plugin, t):
            _used_plugins.append(plugin.__name__)
            classes.append(plugin)

    return classes


def _register_plugins(factory: Factory, t: type) -> None:
    """Register the plugins with the factory."""
    for plugin in _get_plugins(t):
        factory.register_plugin(plugin.__name__, plugin)
    
    # Auto register third-party plugins using entry_points
    factory.auto_register_plugins()


def _register_factories(service_container: ServiceContainer) -> None:
    """Register the factories with the service container."""
    # Logging
    log_plugin_factory = service_container.log_plugin_factory()
    _register_plugins(log_plugin_factory, LoggerPlugin)

    # Cache
    cache_plugin_factory = service_container.cache_plugin_factory()
    _register_plugins(cache_plugin_factory, CachePlugin)

    # Add other factory registrations here


def load_service_container(config: Config) -> ServiceContainer:
    """Load the service container."""

    service_container = ServiceContainer(config=config)
    _register_factories(service_container)
    logger = service_container.log_service()

    for plugin in _plugins:
        if plugin.__name__ not in _used_plugins:
            msg = f"WARNING: Failed to register plugin, '{plugin.__name__}'. Please check the plugin meets the required protocol of the desired plugin protocol."
            logger.warning(msg)
            sys.stderr.write(msg)

    return service_container
