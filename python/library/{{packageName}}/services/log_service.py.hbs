"""Log Service."""

import inspect
import threading
from pathlib import Path
from typing import Any

from {{packageName}}.config.config import Config
from {{packageName}}.factories.logger_plugin_factory import LoggerPluginFactory
from {{packageName}}.plugins.logger.logger_plugin import LoggerPlugin


class LogService:
    """Log Service."""

    def __init__(
        self,
        plugin_factory: LoggerPluginFactory,
        config: Config,
    ):
        logging_config = config.logging
        self._source = logging_config.source
        self._lock = threading.Lock()
        cwd = Path(config.cwd).resolve()

        self._loggers: list[LoggerPlugin] = []

        for lc in logging_config.plugins:
            self._loggers.append(
                plugin_factory.create_plugin(lc.plugin_id, cwd, lc.settings)
            )

    def _get_data(self, **kwargs: Any) -> dict[str, Any]:
        data: dict[str, Any] = {}
        if self._source:
            current_frame = inspect.currentframe()
            caller_frame = current_frame.f_back if current_frame else None
            caller_frame = caller_frame.f_back if caller_frame else None
            caller_info = inspect.getframeinfo(caller_frame) if caller_frame else None
            if caller_info:
                data["filename"] = caller_info.filename
                data["linenumber"] = caller_info.lineno
                data["function"] = caller_info.function
        return {**data, **kwargs}

    def info(self, msg: str, **kwargs: Any) -> None:
        """Log Info."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.info(msg, **data)

    def debug(self, msg: str, **kwargs: Any) -> None:
        """Log Debug."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.debug(msg, **data)

    def warning(self, msg: str, **kwargs: Any) -> None:
        """Log Warning."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.warning(msg, **data)

    def error(self, msg: str, **kwargs: Any) -> None:
        """Log Error."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.error(msg, **data)

    def critical(self, msg: str, **kwargs: Any) -> None:
        """Log Critical."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.critical(msg, **data)

    def fatal(self, msg: str, **kwargs: Any) -> None:
        """Log Fatal."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.fatal(msg, **data)

    def log(self, level: int, msg: str, **kwargs: Any) -> None:
        """Log."""
        data = self._get_data(**kwargs)
        with self._lock:
            for logger in self._loggers:
                logger.log(level, msg, **data)
