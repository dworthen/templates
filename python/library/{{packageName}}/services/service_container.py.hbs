import importlib
import importlib.metadata

from dependency_injector import containers, providers

from {{packageName}}.config import Config
from {{packageName}}.factories import LogPluginFactory

from .log_service import LogService

_package_prefix = "{{packageName}}_plugin"


def _get_package_names_to_auto_wire():
    """Auto wire installed packages.

    with the defined prefix so plugins in those
    packages can use default services with DI.
    Plugin packages do not have to be distributed
    with the package prefix for their plugins to be
    auto registered. Using tool.entry_points will
    allow the plugins to be auto registered.
    Distribution with the package prefix is required
    only if the plugins wish to use DI services.
    """
    packages = importlib.metadata.packages_distributions()
    return [pkg for pkg in packages if pkg.startswith(_package_prefix)]


class ServiceContainer(containers.DeclarativeContainer):
    """Application service container."""

    wiring_config = containers.WiringConfiguration(
        packages=["{{packageName}}", *_get_package_names_to_auto_wire()],
        auto_wire=True,
    )
    """This will auto wire package and installed packages with defined prefix"""

    config = providers.Dependency(instance_of=Config)
    """Config is required when instantiating service container ServiceContainer(config=config)"""

    log_plugin_factory = providers.Singleton(LogPluginFactory)
    """Log Plugin Factory"""

    log_service = providers.Singleton(
        LogService, plugin_factory=log_plugin_factory, config=config
    )
    """Log Service"""

    # Caching service
    # vector DB service
    # Progress Reporter service
    # Pipeline steps, e.g., text chunking
