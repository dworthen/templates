"""Cache plugin interface."""

from abc import abstractmethod
from typing import Any, Protocol

from {{packageName}}.plugins.plugin import Plugin


class CachePlugin(Plugin[Any], Protocol):
    """Cache Plugin Interface."""

    @abstractmethod
    def get(self, key: str) -> str | None:
        """Get."""
        raise NotImplementedError

    @abstractmethod
    def set(self, key: str, value: str) -> None:
        """Set."""
        raise NotImplementedError

    @abstractmethod
    def delete(self, key: str) -> None:
        """Delete."""
        raise NotImplementedError

    @abstractmethod
    def clear(self) -> None:
        """Clear."""
        raise NotImplementedError

    @abstractmethod
    def __contains__(self, key: str) -> bool:
        """Contains in cache."""
        raise NotImplementedError
