"""Log plugin interface."""

from abc import abstractmethod
from typing import Any, Protocol, TypeVar

from pydantic import BaseModel

from {{packageName}}.plugins import Plugin

T = TypeVar("T", covariant=True, bound=BaseModel)


class LogPlugin(Plugin[Any], Protocol):
    """Log Plugin Interface."""

    @abstractmethod
    def debug(self, msg: str) -> None:
        """Log Debug."""
        raise NotImplementedError

    @abstractmethod
    def info(self, msg: str) -> None:
        """Log Info."""
        raise NotImplementedError

    @abstractmethod
    def warning(self, msg: str) -> None:
        """Log Warning."""
        raise NotImplementedError

    @abstractmethod
    def error(self, msg: str) -> None:
        """Log Error."""
        raise NotImplementedError

    @abstractmethod
    def critical(self, msg: str) -> None:
        """Log Critical."""
        raise NotImplementedError

    @abstractmethod
    def fatal(self, msg: str) -> None:
        """Log Fatal."""
        raise NotImplementedError

    @abstractmethod
    def log(self, level: int, msg: str) -> None:
        """Log."""
        raise NotImplementedError
