"""Factory Base Class."""

import inspect
import sys
from abc import ABC, abstractmethod
from importlib.metadata import entry_points
from pathlib import Path
from typing import Any, Generic, TypeVar, cast

from {{packageName}}.plugins.plugin import Plugin

T = TypeVar("T", bound=Plugin[Any])


class PluginNotFoundError(ValueError):
    """Plugin not found error."""

    def __init__(self, key: str) -> None:
        """Initialize the error."""
        msg = f"Failed to load Plugin. No plugin is registered for key: '{key}'."
        super().__init__(msg)


class Factory(ABC, Generic[T]):
    """Abstract Base Class for Plugin Registry."""

    @property
    @abstractmethod
    def _entry_points_registration_key(self) -> str:
        """Get the registration key.

        This key is used to auto-register plugins from entry points.
        Third-party packages can specify available plugins using entry points.
        """

    @property
    @abstractmethod
    def _plugin_type(self) -> type:
        """Get the type of the plugin.

        This is used to validate that the plugin implements the correct interface during registration.
        """
        raise NotImplementedError

    def __init__(self):
        """Initialize the plugin registry."""
        self._plugins: dict[str, type[T]] = {}

    def register_plugin(self, key: str, plugin: type[T]) -> None:
        """Register a plugin.

        Print warnings when overriding existing plugins or when the plugin does not implement the correct interface.
        Does not raise exceptions so bad plugins can be ignored.
        This prevents bad or outdated plugins from breaking the entire application if they are not used.
        """
        if key in self._plugins:
            existing_plugin = self._plugins[key]
            msg = f"Registering '{plugin.__name__}' for '{key}' overrides existing plugin, '{existing_plugin.__name__}', registered to the same key."
            sys.stderr.write(msg)
        if not inspect.isclass(plugin) or not issubclass(plugin, self._plugin_type):
            msg = f"Failed to register plugin, '{plugin.__name__}', for '{key}' as it does not implement the {self._plugin_type.__name__} class."
            sys.stderr.write(msg)
        self._plugins[key] = plugin

    def get_all_plugins(self) -> dict[str, type[T]]:
        """Get all registered plugins."""
        return self._plugins

    def get_plugin(self, plugin_id: str) -> type[T]:
        """Get a plugin."""
        if plugin_id not in self._plugins:
            raise PluginNotFoundError(plugin_id)
        return self._plugins[plugin_id]

    def create_plugin(self, plugin_id: str, cwd: Path, settings: dict[str, Any]) -> T:
        """Create a plugin."""
        plugin_cls = self.get_plugin(plugin_id)
        args = plugin_cls.get_settings(cwd, **settings)
        return plugin_cls(args)

    def auto_register_plugins(self) -> None:
        """Auto register third-party plugins.
        
        Auto register third-party plugins using entry points.
        """
        if (
            not hasattr(self, "_entry_points_registration_key")
            or self._entry_points_registration_key is None
            or self._entry_points_registration_key.strip() == ""
        ):
            return
        plugins = entry_points(group=self._entry_points_registration_key)
        for entry_point in plugins:
            plugin = entry_point.load()
            self.register_plugin(entry_point.name, cast(type[T], plugin))
